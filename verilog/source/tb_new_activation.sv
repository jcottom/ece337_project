/*
 This module serves as a testbench for the activation module in activation.sv.
 It reads values from ece337_project/python/lut.pat, which are generated by
 ece337_project/python/lut.py. It is important that the values in lut.pat are
 generated with the same fixed-point scaling factor (variable "s") as used to
 generate the table in activation.sv. Note that there isn't a great reason to
 generate a clock signal in this testbench, because the design is combinational;
 it just serves to separate each test by a clock cycle.
 */

`timescale 1ns / 100ps
module tb_new_activation();
   localparam CLK_PERIOD = 10.0ns;
   localparam NUM_TESTCASES = 17'h10000;

   reg tb_clk;
   reg [15:0] tb_in, tb_out, tb_expected;
   integer    file,r;

   logic [16:0] num_passes;
   logic [16:0] num_failures;

   activation DUT (tb_in, tb_out);

   // Clock generation
   always begin
      tb_clk = 1'b0;
      #(CLK_PERIOD / 2.0);
      tb_clk = 1'b1;
      #(CLK_PERIOD / 2.0);
   end

   initial begin : test
      num_passes = 0;
      num_failures = 0;

      file = $fopen("../python/lut.pat", "r");
      if(!file) disable test;

      while (!$feof(file)) begin
         // Wait until start of clock cycle
         @(posedge tb_clk);

         // Read in test input and expected output
         r = $fscanf(file, "%b %b\n", tb_in, tb_expected);

         // Wait half a clock cycle
         #(CLK_PERIOD/2);

         // Assert output
         assert(tb_out == tb_expected) begin
            $display("Test case PASSED: sigmoid(%b) = %b", tb_in, tb_out);
            num_passes = num_passes + 1;
         end else begin
            $error("Test case FAILED: sigmoid(%d) = %d != %d", tb_in, tb_expected, tb_out);
            num_failures = num_failures + 1;
         end
      end // while (!$feof(file))

      $display("%d/%d test cases passed", num_passes, NUM_TESTCASES);
      $display("%d/%d test cases failed", num_failures, NUM_TESTCASES);
   end // block: test

endmodule // tb_activation
